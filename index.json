{
  "README.html": {
    "href": "README.html",
    "title": "SESION DE LABORATORIO N° 05: PRUEBAS CON MUTACIONES",
    "summary": "SESION DE LABORATORIO N° 05: PRUEBAS CON MUTACIONES Nombre: OBJETIVOS Comprender el funcionamiento de las pruebas con mutanciones utilizando Stryker mutator. REQUERIMIENTOS Conocimientos: Conocimientos básicos de Bash (powershell). Conocimientos básicos de Contenedores (Docker). Hardware: Virtualization activada en el BIOS.. CPU SLAT-capable feature. Al menos 4GB de RAM. Software: Windows 10 64bit: Pro, Enterprise o Education (1607 Anniversary Update, Build 14393 o Superior) Docker Desktop Powershell versión 7.x Net 8 o superior Visual Studio Code CONSIDERACIONES INICIALES Clonar el repositorio mediante git para tener los recursos necesarios DESARROLLO Iniciar la aplicación Powershell o Windows Terminal en modo administrador Ejecutar el siguiente comando para crear una nueva solución dotnet new sln -o Bank Acceder a la solución creada y ejecutar el siguiente comando para crear una nueva libreria de clases y adicionarla a la solución actual. cd Bank dotnet new classlib -o Bank.Domain dotnet sln add ./Bank.Domain/Bank.Domain.csproj Ejecutar el siguiente comando para crear un nuevo proyecto de pruebas y adicionarla a la solución actual dotnet new xunit -o Bank.Domain.Tests dotnet sln add ./Bank.Domain.Tests/Bank.Domain.Tests.csproj dotnet add ./Bank.Domain.Tests/Bank.Domain.Tests.csproj reference ./Bank.Domain/Bank.Domain.csproj Iniciar Visual Studio Code (VS Code) abriendo el folder de la solución como proyecto. En el proyecto Bank.Domain, si existe un archivo Class1.cs proceder a eliminarlo. Asimismo en el proyecto Bank.Domain.Tests si existiese un archivo UnitTest1.cs, también proceder a eliminarlo. En VS Code, en el proyecto Bank.Domain proceder a crear el archivo BankAccount.cs e introducir el siguiente código: public class BankAccount { public const string DebitAmountExceedsBalanceMessage = \"Debit amount exceeds balance\"; public const string DebitAmountLessThanZeroMessage = \"Debit amount is less than zero\"; private readonly string m_customerName; private double m_balance; private BankAccount() { } public BankAccount(string customerName, double balance) { m_customerName = customerName; m_balance = balance; } public string CustomerName { get { return m_customerName; } } public double Balance { get { return m_balance; } } public void Debit(double amount) { if (amount > m_balance) throw new ArgumentOutOfRangeException(\"amount\", amount, DebitAmountExceedsBalanceMessage); if (amount < 0) throw new ArgumentOutOfRangeException(\"amount\", amount, DebitAmountLessThanZeroMessage); m_balance -= amount; } public void Credit(double amount) { if (amount < 0) throw new ArgumentOutOfRangeException(\"amount\"); m_balance += amount; } } Luego en el proyecto Bank.Domain.Tests añadir un nuevo archivo BanckAccountTests.cs e introducir el siguiente código: using Bank.Domain; using System; using Xunit; namespace Bank.Domain.Tests; public class BankAccountTests { [Theory] [InlineData(11.99, 4.55, 7.44)] [InlineData(12.3, 5.2, 7.1)] public void MultiDebit_WithValidAmount_UpdatesBalance( double beginningBalance, double debitAmount, double expected ) { // Arrange BankAccount account = new BankAccount(\"Mr. Bryan Walton\", beginningBalance); // Act account.Debit(debitAmount); // Assert double actual = account.Balance; Assert.Equal(Math.Round(expected,2), Math.Round(actual,2)); } [Fact] public void Debit_WhenAmountIsLessThanZero_ShouldThrowArgumentOutOfRange() { // Arrange double beginningBalance = 11.99; double debitAmount = -100.00; BankAccount account = new BankAccount(\"Mr. Bryan Walton\", beginningBalance); // Act and assert Assert.Throws<System.ArgumentOutOfRangeException>(() => account.Debit(debitAmount)); } [Fact] public void Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange() { // Arrange double beginningBalance = 11.99; double debitAmount = 20.0; BankAccount account = new BankAccount(\"Mr. Bryan Walton\", beginningBalance); // Act try { account.Debit(debitAmount); } catch (System.ArgumentOutOfRangeException e) { // Assert Assert.Contains(BankAccount.DebitAmountExceedsBalanceMessage, e.Message); } } } Abrir un terminal en VS Code (CTRL + Ñ) o vuelva al terminal anteriormente abierto, y ejecutar los comandos: dotnet test --collect:\"XPlat Code Coverage\" El paso anterior debe producir un resultado satisfactorio como el siguiente. Failed! - Failed: 0, Passed: 4, Skipped: 0, Total: 1, Duration: < 1 ms En el terminal, proceder a ejecutar los siguientes comandos para realizar pruebas de mutacion dotnet tool install -g dotnet-stryker dotnet stryker El paso anterior debe producir un resultado satisfactorio similar al siguiente. _____ _ _ _ _ ______ _______ / ____| | | | | \\ | | ____|__ __| | (___ | |_ _ __ _ _| | _____ _ __ | \\| | |__ | | \\___ \\| __| '__| | | | |/ / _ \\ '__| | . ` | __| | | ____) | |_| | | |_| | < __/ | | |\\ | |____ | | |_____/ \\__|_| \\__, |_|\\_\\___|_| (_)|_| \\_|______| |_| __/ | |___/ Version: 4.3.0 [08:42:56 INF] Analysis starting. [08:42:56 INF] Identifying projects to mutate in C:\\Users\\HP\\source\\repos\\Bank\\Bank.sln. This can take a while. [08:42:57 INF] Found project C:\\Users\\HP\\source\\repos\\Bank\\Bank.Domain\\Bank.Domain.csproj to mutate. [08:42:57 INF] Analysis complete. [08:42:57 INF] Building solution Bank.sln [08:42:57 INF] Building project Bank.sln using dotnet build Bank.sln (directory C:\\Users\\HP\\source\\repos\\Bank.) [08:43:00 INF] Number of tests found: 4 for project C:\\Users\\HP\\source\\repos\\Bank\\Bank.Domain\\Bank.Domain.csproj. Initial test run started. [08:43:02 INF] 22 mutants created [08:43:02 INF] Capture mutant coverage using 'CoverageBasedTest' mode. Hint: by passing \"--open-report or -o\" the report will open automatically and update the report in real-time. [08:43:02 INF] 7 mutants got status NoCoverage. Reason: Not covered by any test. [08:43:02 INF] 2 mutants got status Ignored. Reason: Removed by block already covered filter [08:43:02 INF] 9 total mutants are skipped for the above mentioned reasons [08:43:02 INF] 13 total mutants will be tested ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████100,00% │ Testing mutant 13 / 13 │ K 8 │ S 5 │ T 0 │ ~0m 00s │ 00:00:16 Killed: 8 Survived: 5 Timeout: 0 Your html report has been generated at: C:\\Users\\HP\\source\\repos\\Bank\\StrykerOutput\\2024-10-26.08-42-55\\reports\\mutation-report.html You can open it in your browser of choice. Finalmente proceder a verificar la cobertura, dentro del proyecto Primes.Tests se dede haber generado una carpeta o directorio TestResults, en el cual posiblemente exista otra subpcarpeta o subdirectorio conteniendo un archivo con nombre coverage.cobertura.xml, si existe ese archivo proceder a ejecutar los siguientes comandos desde la linea de comandos abierta anteriomente, de los contrario revisar el paso 8: dotnet tool install -g dotnet-reportgenerator-globaltool ReportGenerator \"-reports:./*/*/*/coverage.cobertura.xml\" \"-targetdir:Cobertura\" -reporttypes:HTML El comando anterior primero proceda instalar una herramienta llamada ReportGenerator (https://reportgenerator.io/) la cual mediante la segunda parte del comando permitira generar un reporte en formato HTML con la cobertura obtenida de la ejecución de las pruebas. Este reporte debe localizarse dentro de una carpeta llamada Cobertura y puede acceder a el abriendo con un navegador de internet el archivo index.htm. Actividades Encargadas Adicionar los escenarios, casos de prueba, metodos de prueba para las mutaciones no coberturadas (7) e ignoradas (2) para completar la cobertura del 100% del código. Completar la documentación del Clases, atributos y métodos para luego generar una automatización (publish_docs.yml) que genere la documentación utilizando DocFx y la publique en una Github Page Generar una automatización (publish_cov_report.yml) que: * Compile el proyecto y ejecute las pruebas unitarias, * Genere el reporte de cobertura, * Publique el reporte en Github Page Generar una automatización (publish_mut_report.yml) que: * compile el proyecto y ejecute las pruebas del código * Genere el reporte de mutaciones (Striker) * Publique el reporte en Github Page. Generar una automatización (release.yml) que: * Genere el nuget con su codigo de matricula como version del componente, * Publique el nuget en Github Packages, * Genere el release correspondiente"
  },
  "api/Bank.Domain.BankAccount.html": {
    "href": "api/Bank.Domain.BankAccount.html",
    "title": "Class BankAccount",
    "summary": "Class BankAccount Representa una cuenta bancaria con operaciones de débito y crédito. Inheritance object BankAccount Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Bank.Domain Assembly: Bank.Domain.dll Syntax public class BankAccount Constructors | Edit this page View Source BankAccount(string, double) Inicializa una nueva instancia de la clase BankAccount. Declaration public BankAccount(string customerName, double balance) Parameters Type Name Description string customerName Nombre del cliente. double balance Saldo inicial. Fields | Edit this page View Source DebitAmountExceedsBalanceMessage Mensaje de error cuando el monto a debitar excede el saldo. Declaration public const string DebitAmountExceedsBalanceMessage = \"Debit amount exceeds balance\" Field Value Type Description string | Edit this page View Source DebitAmountLessThanZeroMessage Mensaje de error cuando el monto a debitar es menor que cero. Declaration public const string DebitAmountLessThanZeroMessage = \"Debit amount is less than zero\" Field Value Type Description string Properties | Edit this page View Source Balance Obtiene el saldo actual de la cuenta. Declaration public double Balance { get; } Property Value Type Description double | Edit this page View Source CustomerName Obtiene el nombre del cliente. Declaration public string CustomerName { get; } Property Value Type Description string Methods | Edit this page View Source Credit(double) Acredita un monto a la cuenta. Declaration public void Credit(double amount) Parameters Type Name Description double amount Monto a acreditar. Exceptions Type Condition ArgumentOutOfRangeException Si el monto es menor que cero. | Edit this page View Source Debit(double) Debita un monto de la cuenta. Declaration public void Debit(double amount) Parameters Type Name Description double amount Monto a debitar. Exceptions Type Condition ArgumentOutOfRangeException Si el monto es mayor al saldo o menor que cero."
  },
  "api/Bank.Domain.Class1.html": {
    "href": "api/Bank.Domain.Class1.html",
    "title": "Class Class1",
    "summary": "Class Class1 Inheritance object Class1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Bank.Domain Assembly: Bank.Domain.dll Syntax public class Class1"
  },
  "api/Bank.Domain.html": {
    "href": "api/Bank.Domain.html",
    "title": "Namespace Bank.Domain",
    "summary": "Namespace Bank.Domain Classes BankAccount Representa una cuenta bancaria con operaciones de débito y crédito. Class1"
  }
}